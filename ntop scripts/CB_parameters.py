import AUTH
import ENVIRONMENT

# In this file, getter functions for creating parameters for all CB's
# that are used to create the samples of rocker arm for multi-objective
# shape optimization. NOTE: Only the CB parameters that are to be generated
# at script level are listed here. CB parameters like implicit bodies are 
# not listed here. TODO: Make a visualisation of CB nesting. TODO: Be sure
# to comment the CB's when there.
#
# All the JSON input and output generated by ntpcl is handled in
# nTopCaller.py. Those have to be set and modified manually for each
# CB -stage.


# --------------------------------------------------------------------------------
#   	                        0. CB_CAD_converter
# --------------------------------------------------------------------------------
# NOTE: Only channel path is varying here.
# NOTE: All paths are are to solid bodies EXCEPT 1 PR_xy_bot -surface .
#   Path_LO_channels    (dynamic)
#   Path_DS
#   Path_machining      (PR, pin, V united in .stp input)
#   Path_PR_bushing_enclosed
#   Path_PR_hole_inverse
#   Path_PR_machining_allowance
#   Path_PR_passive_region_booster
#   Path_PR_cyl_surf_bottom
#   Path_V_bushing_enclosed
#   Path_V_hole_inverse
#   Path_V_machining_allowance
#   Path_V_passive_region_booster
#   Path_pin_bushing_enclosed
#   Path_pin_hole_inverse
#   Path_pin_machining_allowance
#   Path_fixture
#   Path_fixture_machining_allowance

# This kind of approach was chosen to prevent absolute paths ending up to git origin
CB_CAD_CONVERTER_PARAMS = {
    "Path_LO_channels" : ENVIRONMENT.CB_CAD_CONVERTER_PATHS["Path_LO_channels"],
    "Path_DS" : ENVIRONMENT.CB_CAD_CONVERTER_PATHS["Path_DS"],
    "Path_machining" : ENVIRONMENT.CB_CAD_CONVERTER_PATHS["Path_machining"],
    "Path_PR_bushing_enclosed" : ENVIRONMENT.CB_CAD_CONVERTER_PATHS["Path_PR_bushing_enclosed"],
    "Path_PR_hole_inverse" : ENVIRONMENT.CB_CAD_CONVERTER_PATHS["Path_PR_hole_inverse"], 
    "Path_PR_machining_allowance" : ENVIRONMENT.CB_CAD_CONVERTER_PATHS["Path_PR_machining_allowance"],
    "Path_PR_passive_region_booster" : ENVIRONMENT.CB_CAD_CONVERTER_PATHS["Path_PR_passive_region_booster"],
    "Path_PR_cyl_surf_bottom" : ENVIRONMENT.CB_CAD_CONVERTER_PATHS["Path_PR_cyl_surf_bottom"],
    "Path_V_bushing_enclosed" : ENVIRONMENT.CB_CAD_CONVERTER_PATHS["Path_V_bushing_enclosed"],
    "Path_V_hole_inverse" : ENVIRONMENT.CB_CAD_CONVERTER_PATHS["Path_V_hole_inverse"],
    "Path_V_machining_allowance" : ENVIRONMENT.CB_CAD_CONVERTER_PATHS["Path_V_machining_allowance"],
    "Path_V_passive_region_booster" : ENVIRONMENT.CB_CAD_CONVERTER_PATHS["Path_V_passive_region_booster"],
    "Path_pin_bushing_enclosed" : ENVIRONMENT.CB_CAD_CONVERTER_PATHS["Path_pin_bushing_enclosed"],
    "Path_pin_hole_inverse" : ENVIRONMENT.CB_CAD_CONVERTER_PATHS["Path_pin_hole_inverse"],
    "Path_pin_machining_allowance" : ENVIRONMENT.CB_CAD_CONVERTER_PATHS["Path_pin_machining_allowance"],
    "Path_fixture" : ENVIRONMENT.CB_CAD_CONVERTER_PATHS["Path_fixture"],
    "Path_fixture_machining_allowance" : ENVIRONMENT.CB_CAD_CONVERTER_PATHS["Path_fixture_machining_allowance"]
}

# Converts map to nTopology JSON input suitable format
# Return:  list of maps [{<name>, <type>, <value>}, ...]
def getCADconverterParameterListJSON(channelPath):
    paramList = []
    for key in CB_CAD_CONVERTER_PARAMS:
        ntopConversion = {"name":key, "type":"text", "value":CB_CAD_CONVERTER_PARAMS[key]}
        if(key == "Path_LO_channels"):
            ntopConversion = {"name":key, "type":"text", "value":channelPath}
        paramList.append(ntopConversion)
    return paramList

# --------------------------------------------------------------------------------
#                      1. Topology optimization CB (TO_CB)
# --------------------------------------------------------------------------------
# The versioning and controlling the outputs for storing is done as follows.
# The file extension is done automatically by CB export blocks,
# so no need to control that in python script level:
#
#     <dir>\\<basename>_<channel_id>_<threshold>_<material_id><.file extension>
#
# NOTE: <channel_id> is to be parsed from path in python.
# NOTE: The TO_CB does not take any path -inputs to .stp files, because
# the implicit bodies are brought from the CB_CAD_converter
# NOTE: TO_CB will export multiple meshes, and the export paths are
# constructed inside the block, from string parameters
#
# String variables:
#   Path_mesh_export_dir
#   basename
#   channel_id
#   material_id

CB_TOP_OPT_PARAMS = {
    "Path_mesh_export_dir" : ENVIRONMENT.CB_TOP_OPT_PARAMS["Path_mesh_export_dir"],
    "basename" : ENVIRONMENT.CB_TOP_OPT_PARAMS["basename"],
    "channel_id" : ENVIRONMENT.CB_TOP_OPT_PARAMS["channel_id"],
    "material_id" : ENVIRONMENT.CB_TOP_OPT_PARAMS["material_id"]
}
