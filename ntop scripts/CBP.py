import AUTH
import ENVIRONMENT
import os

# In this file, getter functions for creating parameters for all CB's
# that are used to create the samples of rocker arm for multi-objective
# shape optimization. NOTE: Only the CB parameters that are to be generated
# at script level are listed here. CB parameters like implicit bodies are 
# not listed here. TODO: Make a visualisation of CB nesting. TODO: Be sure
# to comment the CB's when there.
#
# All the JSON input and output generated by ntpcl is handled in
# nTopCaller.py. Those have to be set and modified manually for each
# CB -stage.





# --------------------------------------------------------------------------------
#                      1. Custom Material (TO_material)
# --------------------------------------------------------------------------------
# Topology optimization is to be done with 3 different materials Wärtsilä uses
# and has fatigue tests done. The fatigue limits are needed at validation phase,
# which is performed with other application written in C++. Materials are:
# - Inconel 718, at 20C >> fatigue limit 240 MPa
# - 316L EOS  >> fatigue limit: 134,5 MPa
# - MaragingSteel
#
# Material:             Inconel 718     316L-0410       MaraginSteel
# Printer:              ?               EOS             ?
# Heat treatment:       As built        As built        ?
# Cycles:               1.00E+09        1.00E+06        ?
# runout:               yes             ?               ?
# fail:                 no              ?               ?
# Amplitude:            >240 Mpa        134.5 MPa       ?
# Young's modulus (z):                  158 GPa         
# Poisson's ratio:



# Converts map to nTopology JSON input suitable format
def getMaterialParameterJSON(materialKey):
    youngsModulus = {
        "name" : "youngs_modulus",
        "type" : "scalar",
        "values" : ENVIRONMENT.CB_MATERIAL[materialKey]["youngsModulus"]["values"],
        "units" : ENVIRONMENT.CB_MATERIAL[materialKey]["youngsModulus"]["units"]
    }
    poissonsRatio = {
        "name" : "poissons_ratio",
        "type" : "scalar",
        "values" : ENVIRONMENT.CB_MATERIAL[materialKey]["poissonsRatio"]["values"]
    }
    density = {
        "name" : "density",
        "type" : "scalar",
        "values" : ENVIRONMENT.CB_MATERIAL[materialKey]["density"]["values"],
        "units" : ENVIRONMENT.CB_MATERIAL[materialKey]["density"]["units"]
    }
    return [youngsModulus, poissonsRatio, density]

# --------------------------------------------------------------------------------
#                      2. Topology optimization CB (TO_CB)
# --------------------------------------------------------------------------------
# The versioning and controlling the outputs for storing is done as follows.
# The file extension is done automatically by CB export blocks,
# so no need to control that in python script level:
#
#     <dir>\\<basename>_<channel_id>_<threshold>_<material_id><.file extension>
#
# NOTE: <channel_id> is to be parsed from path in python.
# NOTE: The TO_CB does not take any path -inputs to .stp files, because
# the implicit bodies are brought from the CB_CAD_converter
# NOTE: TO_CB will export multiple meshes, and the export paths are
# constructed inside the block, from string parameters
# NOTE: Threshold values are manipulated inside CB, not in python scripts.
# This is done for the reason, that we don't have to do expensive SIMP -operations
# over and over to generate multiple meshes. Instead we get multiple meshes by
# copying 'Implicit body from TopOpt result' -block, inside our TO_CB.
#
# String variables:
#   Path_mesh_export_dir
#   basename
#   channel_id
#   material_id

# Create folder structure for channel configuration if it does not already exist
# Return: Paths to channel specific directories
def createChannelFolder(channel_id):
    baseDir = ENVIRONMENT.CB_TOP_OPT_PARAMS["Path_mesh_export_base_dir"]
    channelSubDir = os.path.join(baseDir, channel_id)
    topOptMeshFolder = os.path.join(channelSubDir, ENVIRONMENT.TOP_OPT_MESH_FOLDER_NAME)
    manufacturingDataFolder = os.path.join(channelSubDir, ENVIRONMENT.MAN_FACT_FOLDER_NAME)
    feaFolder = os.path.join(channelSubDir, ENVIRONMENT.FEA_FOLDER)
    for dirPath in [channelSubDir, topOptMeshFolder, manufacturingDataFolder, feaFolder]:
        if not os.path.exists(dirPath):
            os.makedirs(dirPath)
    folders = {
        "channelRoot" : channelSubDir,
        "topOptMeshFolder" : topOptMeshFolder,
        "manufacturingDataFolder" : manufacturingDataFolder,
        "feaFolder" : feaFolder
    }
    return folders

# Converts map to nTopology JSON input suitable format
# Return:  list of maps [{<name>, <type>, <value>}, ...]
def getTopOptParameterListJSON(channel_id, material_id):
    cbTopOptParamsMap = {
        # Each channel_id into own subfolder
        "Path_mesh_export_dir" : createChannelFolder(channel_id)["channelRoot"],
        "basename" : ENVIRONMENT.CB_TOP_OPT_PARAMS["basename"],
        "channel_id" : channel_id,
        "material_id" : material_id
    }
    retVal = []
    for key in cbTopOptParamsMap:
        temp = {"name":key, "type":"text", "value":cbTopOptParamsMap[key]}
        retVal.append(temp)
    return retVal


# --------------------------------------------------------------------------------
#               3. FE Validation, Static Structural (CB_FEA_exporter)
# --------------------------------------------------------------------------------
#
# 
